type PendingGame @model {
  id: ID!
  game: Game! @connection
  expiry: Int! # UTC Epoch Time in milliseconds
}

type Game @model {
  id: ID!
  playerOne: PlayerConfig! @connection
  playerTwo: PlayerConfig @connection
  boardSize: BoardSize!
  mode: GameMode!
  state: GameState!
  moves: [Move!]! @connection(name: "GameMoves")
}

type Move @model {
  id: ID!
  game: Game @connection(name: "GameMoves")
  player: PlayerConfig! @connection
  action: [Action!]! @connection(name: "MoveActions")
  timeLeft: Int # Milliseconds
}

type Action @model {
  id: ID!
  move: Move! @connection(name: "MoveActions")
  player: PlayerConfig! @connection
  pieceType: String!
  pieceFrom: Coordinate!
  pieceTo: Coordinate!
}

type PlayerConfig @model @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
  id: ID!
  pieces: [Piece!]!
  time: Int!
  health: Int
  flags: Int
  moves: Int!
  actionsPerMove: Int!
  rating: Int!
  owner: String
}

type Army @model @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
  id: ID!
  owner: String
  name: String!
  wins: Int!
  losses: Int!
  pieces: [Piece!]!
}

enum GameMode { ctf health no_turns }

type Piece {
  type: PieceType!
  count: Int!
}

enum PieceType { adventurer commoner engineer knight messenger smuggler }

type BoardSize {
  x: Int!
  y: Int!
  z: Int!
}

type Coordinate {
  x: Int!
  y: Int!
  z: Int!
}

type GameState {
  state: State!
  turn: Int!
  result: GameResult
}

type GameResult {
  tie: ResultType!
  winMethod: WinMethod!
  winner: ID
}

enum State { pending active paused done }
enum ResultType { win tie cancel }
enum WinMethod { points moves time forfeit }

# type Query {
#   getGames: [Game]
#   getPlayerGames(player: ID): [Game]
#   getPairGames(playerOne: ID, playerTwo: ID): [Game]
#   getGame(game: ID): Game
# }

# type Mutation {
#   createGame(game: GameInput): Game
#   addMove(gameID: ID, move: MoveInput): Game
#   setState(gameID: ID, result: GameStateInput): GameState
# }